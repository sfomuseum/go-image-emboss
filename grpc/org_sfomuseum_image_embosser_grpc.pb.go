// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: grpc/org_sfomuseum_image_embosser.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageEmbosser_EmbossImage_FullMethodName = "/org_sfomuseum_image_embosser.ImageEmbosser/EmbossImage"
)

// ImageEmbosserClient is the client API for ImageEmbosser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageEmbosserClient interface {
	EmbossImage(ctx context.Context, in *EmbossImageRequest, opts ...grpc.CallOption) (*EmbossImageResponse, error)
}

type imageEmbosserClient struct {
	cc grpc.ClientConnInterface
}

func NewImageEmbosserClient(cc grpc.ClientConnInterface) ImageEmbosserClient {
	return &imageEmbosserClient{cc}
}

func (c *imageEmbosserClient) EmbossImage(ctx context.Context, in *EmbossImageRequest, opts ...grpc.CallOption) (*EmbossImageResponse, error) {
	out := new(EmbossImageResponse)
	err := c.cc.Invoke(ctx, ImageEmbosser_EmbossImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageEmbosserServer is the server API for ImageEmbosser service.
// All implementations must embed UnimplementedImageEmbosserServer
// for forward compatibility
type ImageEmbosserServer interface {
	EmbossImage(context.Context, *EmbossImageRequest) (*EmbossImageResponse, error)
	mustEmbedUnimplementedImageEmbosserServer()
}

// UnimplementedImageEmbosserServer must be embedded to have forward compatible implementations.
type UnimplementedImageEmbosserServer struct {
}

func (UnimplementedImageEmbosserServer) EmbossImage(context.Context, *EmbossImageRequest) (*EmbossImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbossImage not implemented")
}
func (UnimplementedImageEmbosserServer) mustEmbedUnimplementedImageEmbosserServer() {}

// UnsafeImageEmbosserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageEmbosserServer will
// result in compilation errors.
type UnsafeImageEmbosserServer interface {
	mustEmbedUnimplementedImageEmbosserServer()
}

func RegisterImageEmbosserServer(s grpc.ServiceRegistrar, srv ImageEmbosserServer) {
	s.RegisterService(&ImageEmbosser_ServiceDesc, srv)
}

func _ImageEmbosser_EmbossImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbossImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageEmbosserServer).EmbossImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageEmbosser_EmbossImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageEmbosserServer).EmbossImage(ctx, req.(*EmbossImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageEmbosser_ServiceDesc is the grpc.ServiceDesc for ImageEmbosser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageEmbosser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org_sfomuseum_image_embosser.ImageEmbosser",
	HandlerType: (*ImageEmbosserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmbossImage",
			Handler:    _ImageEmbosser_EmbossImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/org_sfomuseum_image_embosser.proto",
}
